// package main

// import (
// 	"fmt"
// 	"log"
// 	"net"
// 	"os"
// 	"os/signal"

// 	"github.com/h-silva/golang-grpc-example/api/pb"
// 	"google.golang.org/grpc"
// )

// type server struct {
// 	pb.UnimplementedFieldServiceServer
// }

// func main() {
// 	// Creates a TCP listener
// 	lis, err := net.Listen("tcp", fmt.Sprintf(":%d", 3000))

// 	if err != nil {
// 		log.Fatalf("Failed to listen on port %d: %s", 3000, err.Error())
// 	}

// 	// Creates a gRPC server
// 	s := grpc.NewServer(nil)

// 	// Register the generated protobuf service
// 	pb.RegisterFieldServiceServer(s, &server{})

// 	log.Println("Serving on port", 3000)

// 	sig := make(chan os.Signal, 1)
// 	signal.Notify(sig, os.Interrupt)

// 	go func() {
// 		if err := s.Serve(lis); err != nil {
// 			log.Fatalf("Failed to serve server on port %d: %s", 3000, err.Error())
// 		}
// 	}()

// 	<-sig

// 	log.Printf("Gracefully shutting down server")
// }
